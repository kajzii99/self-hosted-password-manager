@model IEnumerable<SelfHostedPasswordManager.Models.Credential>

@{
    ViewData["Title"] = "Password manager";
}

<div id="modal-placeholder"></div>
<div class="container">
  <div class="row">
    <div class="col-md-10 offset-md-1">
      <div class="input-group mb-3">
          <br />
          <br />
          <div class="import_export_search" style="display: flex; justify-content: space-between; width: 100%; align-items: center;">
                <button type="button" class="btn btn-primary" data-toggle="ajax-modal" data-target="#create-credential" data-url="@Url.Action("Create", "Credentials")">
                    Create
                </button>

                    <button type="button" class="btn btn-primary" data-toggle="ajax-modal" data-target="#export-credential" data-url="@Url.Action("Export")">Export credentials</button>
                    <button type="button" class="btn btn-primary" data-toggle="ajax-modal" data-target="#import-credential" data-url="@Url.Action("Import")">Import credentials</button>
                    <div style="display: none;">
                        <form action="/credentials/ImportCSV" method="PUT" enctype="multipart/form-data" id="import-form">
                        <input type="file" accept=".csv" id="file" name="file" />
                        <button type="button" class="btn btn-primary" id="import">Import passwords</button>
                        </form>
                    </div>

                <div>
                        <input type="text" placeholder="Search by website" id="credential-search" />
                </div>

                <a href="/records.csv" style="display: none" id="downloading" download="download">Download </a>
           </div>
           <br /> 
           <br />
      <table class="table table-striped">
    <thead>
        <tr>
            <th>
                Website
            </th>
            <th>
                Username 
            </th>
            <th>
                Password
            </th>
            <th>
                Notes
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) 
{
        <tr id="@Html.DisplayFor(modelItem => item.Website)" class="credential-item">
            <td>
                @Html.DisplayFor(modelItem => item.Website)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Username)
            </td>
            <td>
                <form method="POST" action="GetPassword">
                    @Html.AntiForgeryToken()
                    <button type="button" class="btn" onclick="showPassword('@item.Id')">
                        <span id="@item.Id">@Html.DisplayFor(modelItem => item.Password)</span>
                    </button>
                </form>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Notes)
            </td>
            <td>
                <button type="button" class="btn btn-primary" data-toggle="ajax-modal" data-target="#edit-credential" data-url="@Url.Action("Edit", "Credentials", new { id = item.Id })">
                    Edit
                </button>
                <button type="button" class="btn btn-primary" data-toggle="ajax-modal" data-target="#delete-credential" data-url="@Url.Action("Delete", "Credentials", new { id = item.Id })">
                    Delete
                </button>
            </td>
        </tr>
}
    </tbody>
</table>

      </div>
    </div>
  </div>
    <div id="snackbar">Password copied to clipboard! </div>

    <script>
        var lastSpanId = "";
        var credentials = []

        function showPassword(id) {
            if (lastSpanId)
                document.getElementById(lastSpanId).innerHTML = "###################";

            const passwordSpan = document.getElementById(id);

            lastSpanId = id;
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/Credentials/GetPassword");
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.setRequestHeader('RequestVerificationToken', document.getElementsByName('__RequestVerificationToken')[0].value);
            xhr.onreadystatechange = function () {
                if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                    passwordSpan.innerHTML = xhr.responseText;
                    navigator.clipboard.writeText(xhr.responseText);

                    var snackbar = document.getElementById("snackbar");
                    snackbar.className = "show";
                    setTimeout(function () {
                        snackbar.className = snackbar.className.replace("show", "");
                    }, 3000);
                }
            };
            const data = "Id=" + encodeURIComponent(id);
            xhr.send(data);
        }

        // Przypisanie listenera do wyszukiwania
        function loadListeners() {
            credentials = document.getElementsByClassName('credential-item');
            let el = document.getElementById('credential-search');
            if(el){
                el.addEventListener('input', filterRecords);
            }
        }
=

        // Filtrowanie rekordów, poprzez ukrywanie ich w Indexie dynamicznie
        function filterRecords(e){
            const searchVal = e.target.value.toLowerCase();
            for(let i = 0; i < credentials.length; i++){
                let id = String(credentials[i].id).toLowerCase();
                if (id.includes(searchVal)) {
                    credentials[i].style.display = "";
                } else {
                    credentials[i].style.display = "none";
                }
            }
        }

        // Dodanie listenera na moment załadowania się
        window.addEventListener('load', loadListeners);
    </script>
</div>